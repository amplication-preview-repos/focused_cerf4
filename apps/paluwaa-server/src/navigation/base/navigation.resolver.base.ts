/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Navigation } from "./Navigation";
import { NavigationCountArgs } from "./NavigationCountArgs";
import { NavigationFindManyArgs } from "./NavigationFindManyArgs";
import { NavigationFindUniqueArgs } from "./NavigationFindUniqueArgs";
import { CreateNavigationArgs } from "./CreateNavigationArgs";
import { UpdateNavigationArgs } from "./UpdateNavigationArgs";
import { DeleteNavigationArgs } from "./DeleteNavigationArgs";
import { NavigationService } from "../navigation.service";
@graphql.Resolver(() => Navigation)
export class NavigationResolverBase {
  constructor(protected readonly service: NavigationService) {}

  async _navigationsMeta(
    @graphql.Args() args: NavigationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Navigation])
  async navigations(
    @graphql.Args() args: NavigationFindManyArgs
  ): Promise<Navigation[]> {
    return this.service.navigations(args);
  }

  @graphql.Query(() => Navigation, { nullable: true })
  async navigation(
    @graphql.Args() args: NavigationFindUniqueArgs
  ): Promise<Navigation | null> {
    const result = await this.service.navigation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Navigation)
  async createNavigation(
    @graphql.Args() args: CreateNavigationArgs
  ): Promise<Navigation> {
    return await this.service.createNavigation({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Navigation)
  async updateNavigation(
    @graphql.Args() args: UpdateNavigationArgs
  ): Promise<Navigation | null> {
    try {
      return await this.service.updateNavigation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Navigation)
  async deleteNavigation(
    @graphql.Args() args: DeleteNavigationArgs
  ): Promise<Navigation | null> {
    try {
      return await this.service.deleteNavigation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
