/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Navigation as PrismaNavigation } from "@prisma/client";

export class NavigationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.NavigationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.navigation.count(args);
  }

  async navigations(
    args: Prisma.NavigationFindManyArgs
  ): Promise<PrismaNavigation[]> {
    return this.prisma.navigation.findMany(args);
  }
  async navigation(
    args: Prisma.NavigationFindUniqueArgs
  ): Promise<PrismaNavigation | null> {
    return this.prisma.navigation.findUnique(args);
  }
  async createNavigation(
    args: Prisma.NavigationCreateArgs
  ): Promise<PrismaNavigation> {
    return this.prisma.navigation.create(args);
  }
  async updateNavigation(
    args: Prisma.NavigationUpdateArgs
  ): Promise<PrismaNavigation> {
    return this.prisma.navigation.update(args);
  }
  async deleteNavigation(
    args: Prisma.NavigationDeleteArgs
  ): Promise<PrismaNavigation> {
    return this.prisma.navigation.delete(args);
  }
}
