/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { FooterService } from "../footer.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { FooterCreateInput } from "./FooterCreateInput";
import { Footer } from "./Footer";
import { FooterFindManyArgs } from "./FooterFindManyArgs";
import { FooterWhereUniqueInput } from "./FooterWhereUniqueInput";
import { FooterUpdateInput } from "./FooterUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class FooterControllerBase {
  constructor(
    protected readonly service: FooterService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Footer })
  @nestAccessControl.UseRoles({
    resource: "Footer",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createFooter(@common.Body() data: FooterCreateInput): Promise<Footer> {
    return await this.service.createFooter({
      data: data,
      select: {
        createdAt: true,
        id: true,
        quotes: true,
        socialLinks: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Footer] })
  @ApiNestedQuery(FooterFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Footer",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async footers(@common.Req() request: Request): Promise<Footer[]> {
    const args = plainToClass(FooterFindManyArgs, request.query);
    return this.service.footers({
      ...args,
      select: {
        createdAt: true,
        id: true,
        quotes: true,
        socialLinks: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Footer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Footer",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async footer(
    @common.Param() params: FooterWhereUniqueInput
  ): Promise<Footer | null> {
    const result = await this.service.footer({
      where: params,
      select: {
        createdAt: true,
        id: true,
        quotes: true,
        socialLinks: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Footer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Footer",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateFooter(
    @common.Param() params: FooterWhereUniqueInput,
    @common.Body() data: FooterUpdateInput
  ): Promise<Footer | null> {
    try {
      return await this.service.updateFooter({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          quotes: true,
          socialLinks: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Footer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Footer",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteFooter(
    @common.Param() params: FooterWhereUniqueInput
  ): Promise<Footer | null> {
    try {
      return await this.service.deleteFooter({
        where: params,
        select: {
          createdAt: true,
          id: true,
          quotes: true,
          socialLinks: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
