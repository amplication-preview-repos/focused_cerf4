/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Footer } from "./Footer";
import { FooterCountArgs } from "./FooterCountArgs";
import { FooterFindManyArgs } from "./FooterFindManyArgs";
import { FooterFindUniqueArgs } from "./FooterFindUniqueArgs";
import { CreateFooterArgs } from "./CreateFooterArgs";
import { UpdateFooterArgs } from "./UpdateFooterArgs";
import { DeleteFooterArgs } from "./DeleteFooterArgs";
import { FooterService } from "../footer.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Footer)
export class FooterResolverBase {
  constructor(
    protected readonly service: FooterService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Footer",
    action: "read",
    possession: "any",
  })
  async _footersMeta(
    @graphql.Args() args: FooterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Footer])
  @nestAccessControl.UseRoles({
    resource: "Footer",
    action: "read",
    possession: "any",
  })
  async footers(@graphql.Args() args: FooterFindManyArgs): Promise<Footer[]> {
    return this.service.footers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Footer, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Footer",
    action: "read",
    possession: "own",
  })
  async footer(
    @graphql.Args() args: FooterFindUniqueArgs
  ): Promise<Footer | null> {
    const result = await this.service.footer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Footer)
  @nestAccessControl.UseRoles({
    resource: "Footer",
    action: "create",
    possession: "any",
  })
  async createFooter(@graphql.Args() args: CreateFooterArgs): Promise<Footer> {
    return await this.service.createFooter({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Footer)
  @nestAccessControl.UseRoles({
    resource: "Footer",
    action: "update",
    possession: "any",
  })
  async updateFooter(
    @graphql.Args() args: UpdateFooterArgs
  ): Promise<Footer | null> {
    try {
      return await this.service.updateFooter({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Footer)
  @nestAccessControl.UseRoles({
    resource: "Footer",
    action: "delete",
    possession: "any",
  })
  async deleteFooter(
    @graphql.Args() args: DeleteFooterArgs
  ): Promise<Footer | null> {
    try {
      return await this.service.deleteFooter(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
