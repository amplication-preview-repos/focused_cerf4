/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Pet } from "./Pet";
import { PetCountArgs } from "./PetCountArgs";
import { PetFindManyArgs } from "./PetFindManyArgs";
import { PetFindUniqueArgs } from "./PetFindUniqueArgs";
import { CreatePetArgs } from "./CreatePetArgs";
import { UpdatePetArgs } from "./UpdatePetArgs";
import { DeletePetArgs } from "./DeletePetArgs";
import { PetService } from "../pet.service";
@graphql.Resolver(() => Pet)
export class PetResolverBase {
  constructor(protected readonly service: PetService) {}

  async _petsMeta(
    @graphql.Args() args: PetCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Pet])
  async pets(@graphql.Args() args: PetFindManyArgs): Promise<Pet[]> {
    return this.service.pets(args);
  }

  @graphql.Query(() => Pet, { nullable: true })
  async pet(@graphql.Args() args: PetFindUniqueArgs): Promise<Pet | null> {
    const result = await this.service.pet(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Pet)
  async createPet(@graphql.Args() args: CreatePetArgs): Promise<Pet> {
    return await this.service.createPet({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Pet)
  async updatePet(@graphql.Args() args: UpdatePetArgs): Promise<Pet | null> {
    try {
      return await this.service.updatePet({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Pet)
  async deletePet(@graphql.Args() args: DeletePetArgs): Promise<Pet | null> {
    try {
      return await this.service.deletePet(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
